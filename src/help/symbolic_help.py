import prettytable
import re
try:
    from PyQt6.QtWidgets import QApplication # @Reimport @UnresolvedImport @UnusedImport # pylint: disable=import-error
except Exception: # pylint: disable=broad-except
    from PyQt5.QtWidgets import QApplication # type: ignore # @Reimport @UnresolvedImport @UnusedImport

def content() -> str:
    strlist = []
    helpstr = ''  # noqa: F841 #@UnusedVariable # pylint: disable=unused-variable
    newline = '\n'  # noqa: F841 #@UnusedVariable  # pylint: disable=unused-variable
    strlist.append('<head><style> td, th {border: 1px solid #ddd;  padding: 6px;} th {padding-top: 6px;padding-bottom: 6px;text-align: left;background-color: #0C6AA6; color: white;} </style></head> <body>')
    strlist.append('<b>')
    strlist.append(QApplication.translate('HelpDlg','SYMBOLIC VARIABLES'))
    strlist.append('</b>')
    tbl_SymbolicVariables = prettytable.PrettyTable()
    tbl_SymbolicVariables.field_names = [QApplication.translate('HelpDlg','Symbol'),QApplication.translate('HelpDlg','Description'),QApplication.translate('HelpDlg','Can  shift?\n(see below)')]
    tbl_SymbolicVariables.add_row(['t',QApplication.translate('HelpDlg','Absolute time (seconds) from begin of recording (not only the time after CHARGE!)'),QApplication.translate('HelpDlg','Yes')])
    tbl_SymbolicVariables.add_row(['b',QApplication.translate('HelpDlg','Absolute time (seconds) from begin of recording of the background profile'),QApplication.translate('HelpDlg','Yes')])
    tbl_SymbolicVariables.add_row(['x',QApplication.translate('HelpDlg','Current channel reading (not available in the Plotter)'),'&#160;'])
    tbl_SymbolicVariables.add_row(['Y1',QApplication.translate('HelpDlg','ET value'),QApplication.translate('HelpDlg','Yes')])
    tbl_SymbolicVariables.add_row(['Y2',QApplication.translate('HelpDlg','BT value'),QApplication.translate('HelpDlg','Yes')])
    tbl_SymbolicVariables.add_row(['Y3',QApplication.translate('HelpDlg','Extra #1 T1 value'),QApplication.translate('HelpDlg','Yes')])
    tbl_SymbolicVariables.add_row(['Y4',QApplication.translate('HelpDlg','Extra #1 T2 value'),QApplication.translate('HelpDlg','Yes')])
    tbl_SymbolicVariables.add_row(['Y5',QApplication.translate('HelpDlg','Extra #2 T1 value'),QApplication.translate('HelpDlg','Yes')])
    tbl_SymbolicVariables.add_row(['Y6',QApplication.translate('HelpDlg','Extra #2 T2 value'),QApplication.translate('HelpDlg','Yes')])
    tbl_SymbolicVariables.add_row(['...',QApplication.translate('HelpDlg','...and so forth'),QApplication.translate('HelpDlg','Yes')])
    tbl_SymbolicVariables.add_row(['B1',QApplication.translate('HelpDlg','ET background'),QApplication.translate('HelpDlg','Yes')])
    tbl_SymbolicVariables.add_row(['B2',QApplication.translate('HelpDlg','BT background'),QApplication.translate('HelpDlg','Yes')])
    tbl_SymbolicVariables.add_row(['B3',QApplication.translate('HelpDlg','ExtraBackground #1-A'),QApplication.translate('HelpDlg','Yes')])
    tbl_SymbolicVariables.add_row(['B4',QApplication.translate('HelpDlg','ExtraBackground #1-B'),QApplication.translate('HelpDlg','Yes')])
    tbl_SymbolicVariables.add_row(['B5',QApplication.translate('HelpDlg','ExtraBackground #2-A'),QApplication.translate('HelpDlg','Yes')])
    tbl_SymbolicVariables.add_row(['...',QApplication.translate('HelpDlg','...and so forth'),QApplication.translate('HelpDlg','Yes')])
    tbl_SymbolicVariables.add_row(['T1',QApplication.translate('HelpDlg','ET tare value'),'&#160;'])
    tbl_SymbolicVariables.add_row(['T2',QApplication.translate('HelpDlg','BT tare value'),'&#160;'])
    tbl_SymbolicVariables.add_row(['T3',QApplication.translate('HelpDlg','Extra Device #1 channel 1 tare value'),'&#160;'])
    tbl_SymbolicVariables.add_row(['T4',QApplication.translate('HelpDlg','Extra Device #1 channel 2 tare value'),'&#160;'])
    tbl_SymbolicVariables.add_row(['T5',QApplication.translate('HelpDlg','Extra Device #2 channel 1 tare value'),'&#160;'])
    tbl_SymbolicVariables.add_row(['...',QApplication.translate('HelpDlg','...and so forth'),'&#160;'])
    tbl_SymbolicVariables.add_row(['E1',QApplication.translate('HelpDlg','Last event value of the first event type'),'&#160;'])
    tbl_SymbolicVariables.add_row(['E2',QApplication.translate('HelpDlg','Last event value of the second event type'),'&#160;'])
    tbl_SymbolicVariables.add_row(['E3',QApplication.translate('HelpDlg','Last event value of the third event type'),'&#160;'])
    tbl_SymbolicVariables.add_row(['E4',QApplication.translate('HelpDlg','Last event value of the fourth event type'),'&#160;'])
    tbl_SymbolicVariables.add_row(['&#160;','&#160;','&#160;'])
    tbl_SymbolicVariables.add_row(['R1',QApplication.translate('HelpDlg','ET rate of rise'),QApplication.translate('HelpDlg','Yes')])
    tbl_SymbolicVariables.add_row(['R2',QApplication.translate('HelpDlg','BT rate of rise'),QApplication.translate('HelpDlg','Yes')])
    tbl_SymbolicVariables.add_row(['RB1',QApplication.translate('HelpDlg','Background ET rate of rise'),QApplication.translate('HelpDlg','Yes')])
    tbl_SymbolicVariables.add_row(['RB2',QApplication.translate('HelpDlg','Background BT rate of rise'),QApplication.translate('HelpDlg','Yes')])
    strlist.append(tbl_SymbolicVariables.get_html_string(attributes={'width':'100%','border':'1','padding':'1','border-collapse':'collapse'}))
    strlist.append('<br/><br/><b>')
    strlist.append(QApplication.translate('HelpDlg','SHIFTED SYMBOLIC VARIABLES'))
    strlist.append('</b>')
    tbl_ShiftedSymbolicVariablestop = prettytable.PrettyTable()
    tbl_ShiftedSymbolicVariablestop.header = False
    tbl_ShiftedSymbolicVariablestop.add_row([QApplication.translate('HelpDlg','The symbolic variables t, b, Y<n>, B<n> and R<n> evaluate to the current value of a sequence of values that define a roast profile. To access earlier or later values one can apply a shift value.')+newline+QApplication.translate('HelpDlg','\nFor example, while "Y2" returns the current bean temperature (BT), "Y2[-1]" returns the previous BT temperature and "Y2[-2]" the one before that. Formulas used in the Plotter are applied in sequence to all values, thus there "Y2" points to the current BT temperature processed, "Y2[-1]" the previous BT temperature processed and "Y2[+1]" the next BT temperature to be processed. A positive shift is only available in the Plotter, obviously not during recording.')])
    strlist.append(tbl_ShiftedSymbolicVariablestop.get_html_string(attributes={'width':'100%','border':'1','padding':'1','border-collapse':'collapse'}))
    tbl_ShiftedSymbolicVariables = prettytable.PrettyTable()
    tbl_ShiftedSymbolicVariables.field_names = [QApplication.translate('HelpDlg','Example'),QApplication.translate('HelpDlg','Description')]
    tbl_ShiftedSymbolicVariables.add_row(['t[+1]',QApplication.translate('HelpDlg','Time one index ahead (plotter only)')])
    tbl_ShiftedSymbolicVariables.add_row(['t[-3]',QApplication.translate('HelpDlg','Time three indexes delayed')])
    tbl_ShiftedSymbolicVariables.add_row(['Y1[-2]',QApplication.translate('HelpDlg','ET value delayed by 2 indexes')])
    tbl_ShiftedSymbolicVariables.add_row(['Y2[+1]',QApplication.translate('HelpDlg','BT value index advanced by one index (plotter only)')])
    tbl_ShiftedSymbolicVariables.add_row(['B4[-6]',QApplication.translate('HelpDlg','ExtraBackground #1-B delayed 6 indexes')])
    tbl_ShiftedSymbolicVariables.add_row(['B5[+2]',QApplication.translate('HelpDlg','ExtraBackground #2-A advanced 2 indexes (plotter only)')])
    tbl_ShiftedSymbolicVariables.add_row(['R1[-2]',QApplication.translate('HelpDlg','ET rate of rise delayed two indexes')])
    strlist.append(tbl_ShiftedSymbolicVariables.get_html_string(attributes={'width':'100%','border':'1','padding':'1','border-collapse':'collapse'}))
    strlist.append('<br/><br/><b>')
    strlist.append(QApplication.translate('HelpDlg','INDEXED SYMBOLIC VARIABLES'))
    strlist.append('</b>')
    tbl_IndexedSymbolic = prettytable.PrettyTable()
    tbl_IndexedSymbolic.field_names = [QApplication.translate('HelpDlg','Symbol'),QApplication.translate('HelpDlg','Description')]
    tbl_IndexedSymbolic.add_row([QApplication.translate('HelpDlg','t, b, Y<n>, B<n> and R<n>'),QApplication.translate('HelpDlg','Previously recorded data assigned to the symbolic variables t, b, Y<n>, B<n> and R<n> can also directly accessed by index. "Y2{0}" evaluates to the first recorded bean temperature (BT) and "Y2{CHARGE}" to the bean temperature at CHARGE. Additionally, the symbolic variable b can be used to access the recording time at a certain index of the background profile. Thus "b{CHARGE}" returns the recording time at CHARGE of the background profile.')])
    strlist.append(tbl_IndexedSymbolic.get_html_string(attributes={'width':'100%','border':'1','padding':'1','border-collapse':'collapse'}))
    strlist.append('<br/><br/><b>')
    strlist.append(QApplication.translate('HelpDlg','AXIS MAPPING'))
    strlist.append('</b>')
    tbl_AxisMapping = prettytable.PrettyTable()
    tbl_AxisMapping.field_names = [QApplication.translate('HelpDlg','Symbol'),QApplication.translate('HelpDlg','Description')]
    tbl_AxisMapping.add_row(['k',QApplication.translate('HelpDlg','Scaling factor from RoR to Temp axis. The range of the temperature scale divided by the range of the delta scale. ')])
    tbl_AxisMapping.add_row(['o',QApplication.translate('HelpDlg','Offset from RoR to Temp axis. ')])
    strlist.append(tbl_AxisMapping.get_html_string(attributes={'width':'100%','border':'1','padding':'1','border-collapse':'collapse'}))
    tbl_AxisMappingbottom = prettytable.PrettyTable()
    tbl_AxisMappingbottom.header = False
    tbl_AxisMappingbottom.add_row([QApplication.translate('HelpDlg','Note: RoR values r can be scaled to the temperature axis using a linear approximation of the form "r*k + o". As the variables k and o depend on the actual axis settings which can be changed by the user without triggering a recomputation, those variable are less useful for use in a recording, but useful in the Plotter to plot w.r.t. the RoR y-axis instead of the temperature y-axis.')])
    strlist.append(tbl_AxisMappingbottom.get_html_string(attributes={'width':'100%','border':'1','padding':'1','border-collapse':'collapse'}))
    strlist.append('<br/><br/><b>')
    strlist.append(QApplication.translate('HelpDlg','EVENT INDEX and TIME DELTA'))
    strlist.append('</b>')
    tbl_EventIndex = prettytable.PrettyTable()
    tbl_EventIndex.field_names = [QApplication.translate('HelpDlg','Symbol'),QApplication.translate('HelpDlg','Description')]
    tbl_EventIndex.add_row(['CHARGE, DRY, FCs, FCe, SCs, SCe, DROP',QApplication.translate('HelpDlg','Index of the corresponding event of the profile to retrieve time and values from the corresponding data structures. Evaluates to -1 if not set.')])
    tbl_EventIndex.add_row(['bCHARGE, bDRY, bFCs, bFCe, bSCs, bSCe, bDROP',QApplication.translate('HelpDlg','Index of the corresponding event of the background profile to retrieve time and values from the corresponding data structures. Evaluates to -1 if not set.')])
    tbl_EventIndex.add_row(['&#160;','&#160;'])
    tbl_EventIndex.add_row(['dCHARGE, dDRY, dFCs, dFCe, dSCs, dSCe, dDROP',QApplication.translate('HelpDlg','Time distance in seconds after the corresponding event. Thus dCHARGE is bound to the current roast time (after CHARGE) in seconds while t is bound to the time in seconds from the start of the recording.')])
    strlist.append(tbl_EventIndex.get_html_string(attributes={'width':'100%','border':'1','padding':'1','border-collapse':'collapse'}))
    strlist.append('<br/><br/><b>')
    strlist.append(QApplication.translate('HelpDlg','AREA UNDER THE CURVE (AUC)'))
    strlist.append('</b>')
    tbl_AUC = prettytable.PrettyTable()
    tbl_AUC.field_names = [QApplication.translate('HelpDlg','Symbol'),QApplication.translate('HelpDlg','Description')]
    tbl_AUC.add_row(['AUCbase',QApplication.translate('HelpDlg','AUC base temperature (could be from the selected event, if set)')])
    tbl_AUC.add_row(['AUCtarget',QApplication.translate('HelpDlg','AUC target value (could be from the background profile, if set)')])
    tbl_AUC.add_row(['AUCvalue',QApplication.translate('HelpDlg','the current AUC value. -1 if none available.')])
    strlist.append(tbl_AUC.get_html_string(attributes={'width':'100%','border':'1','padding':'1','border-collapse':'collapse'}))
    strlist.append('<br/><br/><b>')
    strlist.append(QApplication.translate('HelpDlg','PREDICITONS'))
    strlist.append('</b>')
    tbl_Predictions = prettytable.PrettyTable()
    tbl_Predictions.field_names = [QApplication.translate('HelpDlg','Symbol'),QApplication.translate('HelpDlg','Description')]
    tbl_Predictions.add_row(['pDRY',QApplication.translate('HelpDlg','Prediction of the time distance to the DRY event based on the current RoR. Evaluates to -1 on negative RoR and to 0 if the DRY event is already set.')])
    tbl_Predictions.add_row(['pFCs',QApplication.translate('HelpDlg','Same as pDRY, just for the FCs event.')])
    strlist.append(tbl_Predictions.get_html_string(attributes={'width':'100%','border':'1','padding':'1','border-collapse':'collapse'}))
    tbl_Predictionsbottom = prettytable.PrettyTable()
    tbl_Predictionsbottom.header = False
    tbl_Predictionsbottom.add_row([QApplication.translate('HelpDlg','Note: The same rules as for the corresponding PhasesLCDs apply to pDRY and pFCs:')+newline+QApplication.translate('HelpDlg','\nIf there is no background profile the DRY or FCs bean temperature used for the prediction is taken from the Config>Phases setup.')+newline+QApplication.translate('HelpDlg','\nIf there is a background profile and there is DRY or FCs event in the background profile, the DRY or FCs bean temperature used for the prediction is taken from the background profile.')+newline+QApplication.translate('HelpDlg','\nException to the above for DRY only: if AutoDRY is checked the DRY temperature used for the prediction is taken from the Config>Phases setup.  This does not apply to FCs and AutoFCs.')+newline+QApplication.translate('HelpDlg','\nThe prediction value is the calculated time in seconds to reach the DRY or FCs temperature.')])
    strlist.append(tbl_Predictionsbottom.get_html_string(attributes={'width':'100%','border':'1','padding':'1','border-collapse':'collapse'}))
    strlist.append('<br/><br/><b>')
    strlist.append(QApplication.translate('HelpDlg','AMBIENT'))
    strlist.append('</b>')
    tbl_Ambient = prettytable.PrettyTable()
    tbl_Ambient.field_names = [QApplication.translate('HelpDlg','Symbol'),QApplication.translate('HelpDlg','Description')]
    tbl_Ambient.add_row(['aTMP',QApplication.translate('HelpDlg','ambient temperature (default 0)')])
    tbl_Ambient.add_row(['aHUM',QApplication.translate('HelpDlg','ambient humidity (default 0)')])
    tbl_Ambient.add_row(['aPRE',QApplication.translate('HelpDlg','ambient pressure (default 0)')])
    strlist.append(tbl_Ambient.get_html_string(attributes={'width':'100%','border':'1','padding':'1','border-collapse':'collapse'}))
    tbl_Ambientbottom = prettytable.PrettyTable()
    tbl_Ambientbottom.header = False
    tbl_Ambientbottom.add_row([QApplication.translate('HelpDlg','Note: The data is (re-)sampled some seconds after the start of recording')])
    strlist.append(tbl_Ambientbottom.get_html_string(attributes={'width':'100%','border':'1','padding':'1','border-collapse':'collapse'}))
    strlist.append('<br/><br/><b>')
    strlist.append(QApplication.translate('HelpDlg','ROAST PROPERTIES'))
    strlist.append('</b>')
    tbl_RoastProperties = prettytable.PrettyTable()
    tbl_RoastProperties.field_names = [QApplication.translate('HelpDlg','Symbol'),QApplication.translate('HelpDlg','Description')]
    tbl_RoastProperties.add_row(['WEIGHTin',QApplication.translate('HelpDlg','batch size (g)')])
    tbl_RoastProperties.add_row(['MOISTUREin',QApplication.translate('HelpDlg','green moisture (%)')])
    tbl_RoastProperties.add_row(['TEMPunit',QApplication.translate('HelpDlg','temperature unit (Celsius: 0, Fahrenheit: 1)')])
    strlist.append(tbl_RoastProperties.get_html_string(attributes={'width':'100%','border':'1','padding':'1','border-collapse':'collapse'}))
    strlist.append('<br/><br/><b>')
    strlist.append(QApplication.translate('HelpDlg','EXPRESSIONS'))
    strlist.append('</b>')
    tbl_Expressions = prettytable.PrettyTable()
    tbl_Expressions.field_names = [QApplication.translate('HelpDlg','Expression'),QApplication.translate('HelpDlg','Description')]
    tbl_Expressions.add_row(['(<true-expr> if <cond> else <false-expr>)',QApplication.translate('HelpDlg','Conditional. Evaluates to the value of the expression <true-expr> if the condition <cond> holds, otherwise to the value of the expression <false-expr>. The rules of Python are applied to decide if a value holds or not. Thus the boolean values "True" and "False" have the obvious semantic. Any number unequal to 0 evaluates to True and 0 evaluates to False. The value "None" is also evaluated to False.')])
    strlist.append(tbl_Expressions.get_html_string(attributes={'width':'100%','border':'1','padding':'1','border-collapse':'collapse'}))
    strlist.append('<br/><br/><b>')
    strlist.append(QApplication.translate('HelpDlg','MATHEMATICAL FORMULAS'))
    strlist.append('</b>')
    tbl_MathFormulas = prettytable.PrettyTable()
    tbl_MathFormulas.field_names = [QApplication.translate('HelpDlg','Formula'),QApplication.translate('HelpDlg','Description')]
    tbl_MathFormulas.add_row(['abs(x)',QApplication.translate('HelpDlg','Return the absolute value of x.')])
    tbl_MathFormulas.add_row(['acos(x)',QApplication.translate('HelpDlg','Return the arc cosine (measured in radians) of x.')])
    tbl_MathFormulas.add_row(['asin(x)',QApplication.translate('HelpDlg','Return the arc sine (measured in radians) of x.')])
    tbl_MathFormulas.add_row(['atan(x)',QApplication.translate('HelpDlg','Return the arc tangent (measured in radians) of x.')])
    tbl_MathFormulas.add_row(['cos(x)',QApplication.translate('HelpDlg','Return the cosine of x (measured in radians).')])
    tbl_MathFormulas.add_row(['degrees(x)',QApplication.translate('HelpDlg','Convert angle x from radians to degrees.')])
    tbl_MathFormulas.add_row(['exp(x)',QApplication.translate('HelpDlg','Return e raised to the power of x.')])
    tbl_MathFormulas.add_row(['log(x[, base])',QApplication.translate('HelpDlg','Return the logarithm of x to the given base.')])
    tbl_MathFormulas.add_row(['min(x1,...,xn)',QApplication.translate('HelpDlg','Return the minimum of the given values.')])
    tbl_MathFormulas.add_row(['max(x1,...,xn)',QApplication.translate('HelpDlg','Return the maximum of the given values.')])
    tbl_MathFormulas.add_row(['pow(x, y)',QApplication.translate('HelpDlg','Return x**y (x to the power of y).')])
    tbl_MathFormulas.add_row(['radians(x)',QApplication.translate('HelpDlg','Convert angle x from degrees to radians.')])
    tbl_MathFormulas.add_row(['sin(x)',QApplication.translate('HelpDlg','Return the sine of x (measured in radians).')])
    tbl_MathFormulas.add_row(['sqrt(x)',QApplication.translate('HelpDlg','Return the square root of x.')])
    tbl_MathFormulas.add_row(['tan(x)',QApplication.translate('HelpDlg','Return the tangent of x (measured in radians).')])
    strlist.append(tbl_MathFormulas.get_html_string(attributes={'width':'100%','border':'1','padding':'1','border-collapse':'collapse'}))
    strlist.append('<br/><br/><b>')
    strlist.append(QApplication.translate('HelpDlg','MATHEMATICAL CONSTANTS'))
    strlist.append('</b>')
    tbl_Constants = prettytable.PrettyTable()
    tbl_Constants.field_names = [QApplication.translate('HelpDlg','Symbol'),QApplication.translate('HelpDlg','Value')]
    tbl_Constants.add_row(['e',2.71828182845904])
    tbl_Constants.add_row(['pi',3.14159265358979])
    strlist.append(tbl_Constants.get_html_string(attributes={'width':'100%','border':'1','padding':'1','border-collapse':'collapse'}))
    strlist.append('<br/><br/><b>')
    strlist.append(QApplication.translate('HelpDlg','PLOTTER EXTENSIONS'))
    strlist.append('</b>')
    tbl_PlotterExtensionstop = prettytable.PrettyTable()
    tbl_PlotterExtensionstop.header = False
    tbl_PlotterExtensionstop.add_row([QApplication.translate('HelpDlg','Note:  This section applies only to the Plotter\nUsing math formulas in the plotter also allows to use the symbolic variables P and F (see Signals, Symbolic Assignments and the Plotter).')])
    strlist.append(tbl_PlotterExtensionstop.get_html_string(attributes={'width':'100%','border':'1','padding':'1','border-collapse':'collapse'}))
    tbl_PlotterExtensions = prettytable.PrettyTable()
    tbl_PlotterExtensions.field_names = [QApplication.translate('HelpDlg','Symbol'),QApplication.translate('HelpDlg','Description')]
    tbl_PlotterExtensions.add_row(['P1...P9',QApplication.translate('HelpDlg','The variables P1,..,P9 represent the results from plot #1,..,#9. You can perform calculations in a later plot on variables of an earlier plot. That way, the plot variables P1,..,P9 allow the cascading or intermediate results. For example, plot #3 can refer to the results of plot 1 using the variable P1.')])
    tbl_PlotterExtensions.add_row(['F1...F9',QApplication.translate('HelpDlg','F1 refers to the previous result of the actual formula to realize a feedback loop. This is useful in filter designs. Similarly, F2 refers to the second previous result etc.')])
    strlist.append(tbl_PlotterExtensions.get_html_string(attributes={'width':'100%','border':'1','padding':'1','border-collapse':'collapse'}))
    strlist.append('</body>')
    helpstr = ''.join(strlist)
    return re.sub(r'&amp;', r'&',helpstr)
